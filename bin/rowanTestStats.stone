#!/usr/bin/env superdoit_stone
#
# Standard options are always present unless customoptions section is used
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#
options
{
  SuperDoitOptionalOptionWithRequiredArg long: 'jsonFile'.
  SuperDoitOptionalOptionWithRequiredArg long: 'gsVer'.
  SuperDoitOptionalOptionWithRequiredArg long: 'branch'.
  SuperDoitOptionalOptionWithRequiredArg long: 'timeStamp'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] \
                branches --gsVer=<gemstone-version>
                compare --jsonFile=<json-test-results> --gsVer=<gemstone-version> --branch=<git-branch>
                export <directory-path>
                import <directory-path>
                lookup --gsVer=<gemstone-version> --branch=<git-branch> 
                lookup --gsVer=<gemstone-version>
                lookup --timeStamp=<timestamp> 
                lookup
                remove <time-stamp> <count>
                results <time-stamp>
                setsha <time-stamp> <sha>
                store --jsonFile=<json-test-results> --branch=<git-branch>
                summary <time-stamp>
                timestamp
                timestamp --gsVer=<gemstone-version>
                timestamp --branch=<git-branch>
                timestamp --gsVer=<gemstone-version> --branch=<git-branch
                versions
                [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  Write the Stone Version report for the current stone on stdout.

COMMANDS
  BRANCHES
    List the branches for which test samples are recorded.
  COMPARE
    Compare the test sample in the given JSON file against the sample for the
    given GemStone version and git branch.
  LOOKUP
    Lookup the latest sample for the given GemStone version and branch OR given
    timeStamp, and write the sample to the given file name in JSON format. With
    only a GemStone version, write the latest sample for that version. With only
    a branch, write the latest sample for that branch.  With no options, write
    the absolute latest sample.
  REMOVE
    Remove <count> samples that exactly match the <time-stamp> (DateAndTime 
    printString)
  RESULTS
    Print the tests results with the given time stamp on stdout.
  SETSHA
    Set the commit SHA of the sample to the given SHA.
  STORE
    Store the sample in the given JSON file in the data base for the given
    branch. Write the time stamp of the sample to stdout.
  SUMMARY
    Write the results summary for the sample(s) with the given time stamp.
  TIMESTAMP
    Lookup and write the time stamp for the latest sample for the given GemStone
    version and branch. With only a GemStone version, write the time stamp of the
    latest sample for that version. With only a branch, write the time stamp of
    the latest sample for that branch.  With no options, write the time stamp
    of the absolute latest sample.
  VERSIONS
    List the gemstone version for whcih test samples are recorded

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename -D <options>
  $basename --debug <options>

  $basename branches --gsVer=3.7.0 -- rowan_test_stats_361
  $basename compare --jsonFile=testResults.json --gsVer=3.7.0 --branch=issue_724 -- rowan_test_stats_361
  $basename lookup --jsonFile=xxx.json -- rowan_test_stats_361
  $basename lookup --gsVer=3.7.0 --jsonFile=xxx.json -- rowan_test_stats_361
  $basename lookup --branch=issue_724 --jsonFile=xxx.json -- rowan_test_stats_361
  $basename lookup --gsVer=3.7.0 --branch=issue_724 --jsonFile=xxx.json -- rowan_test_stats_361
  $basename lookup --timeStamp="2021-06-30T09:35:12.16632997989655-07:00" --jsonFile=xxx.json -- rowan_test_stats_361
  $basename remove "2021-06-30T09:35:12.16632997989655-07:00" 1 -- rowan_test_stats_361
  $basename setsha "2020-01-23T15:37:11.87647891044617-08:00" 42f863d5 -- rowan_test_stats_361
  $basename store --jsonFile=testResults.json --branch=masterV2.2 -- rowan_test_stats_361
  $basename summary "2021-06-30T09:35:12.16632997989655-07:00" -- rowan_test_stats_361
  $basename timestamp -- rowan_test_stats_361
  $basename timestamp --gsVer=3.7.0 -- rowan_test_stats_361
  $basename timestamp --branch=issue_724 -- rowan_test_stats_361
  $basename timestamp --gsVer=3.7.0 --branch=issue_724 -- rowan_test_stats_361
  $basename versions -- rowan_test_stats_361
#
# get latest sample on branch issue_724 
# export the give sample to xxx.json file
# store the sample in xxx.json db associated with branch candidateV3.0
#
  $basename timestamp --branch=issue_724 -- rowan_test_stats_361 
  $basename lookup --timeStamp=2021-06-30T09:35:12.166330-07:00 --jsonFile=xxx.json -- rowan_test_stats_361
  $basename store --jsonFile=xxx.json --branch=candidateV3.0 -- rowan_test_stats_361
-----
%
method
_commit
	self isSolo
		ifFalse: [
			System commit 
				ifFalse: [
					self stderr nextPutAll: System detailedConflictReportString.
					self error: 'Commit conflict updating suiteSamples' ] ].
%
method
_debugIdenticalTimestamps
	"check for identical timestamps -- DEBUGGING"
	| query |
	query := self _queryTimestamp: (self positionalArgs at: 2).
	self stdout nextPutAll: query queryResult size printString, ' samples with identical timestamp'; lf.
	^ self noResult
%
method
_debugPrintAttributeGivenTimeStamp
	| query |
	query := self _queryTimestamp: (self positionalArgs at: 2).
	query queryResult do: [:each | 
		self stdout nextPutAll: (each perform: (self positionalArgs at: 3) asSymbol) printString; lf ].
	^ self noResult
%
method
_debugTimeStampsWithSha
	"check for samples with given SHA -- DEBUGGING"
	| query |
	query := self _querySHA: (self positionalArgs at: 2).
	self stdout nextPutAll: query queryResult size printString, ' samples with same SHA'; lf.
	^ self noResult
%
method
_debugTimeStampsWithShaSet
	"check for samples with given SHA -- DEBUGGING"
	self _TestSuiteSample_class suiteSamples do: [:sample |
		sample commitSha isEmpty
			ifFalse: [ self stdout nextPutAll: sample timeStamp printString; lf ] ].
	^ self noResult
%
method
_doXXX
	"debug and experiments -- undocumented"
	'x' isEmpty ifTrue: [ ^ self _debugTimeStampsWithShaSet ].
	'x' isEmpty ifTrue: [ ^ self _debugTimeStampsWithSha ].
	'x' isEmpty ifTrue: [ ^ self _debugPrintAttributeGivenTimeStamp ].
	'x' isEmpty ifTrue: [ ^ self _debugIdenticalTimestamps ].
	'' isEmpty ifTrue: [ 
		self _TestSuiteSample_class suiteSamples do: [:sample | sample resultsSummary at: 'summary' ].
		^ self noResult ].
	self stdout nextPutAll: 'No experiments enabled'; lf.
	^ self noResult
%
method
_exportSample: sample to: aStream
	sample exportJsonTo: aStream.
%
method
_queryAbsoluteLatestSample
	| query |
	query := self _TestSuiteSample_class querySuiteSamples: 'each.timeStamp < x'.
	query
		bind: 'x'
		to: (DateAndTime now
				+
					(Duration
						days: 1
						hours: 0
						minutes: 0
						seconds: 0)).
	^ query
%
method
_querySHA: sha
	| query |
	query := self _TestSuiteSample_class querySuiteSamples: 'each.commitSha = x'.
	query
		bind: 'x'
		to: sha.
	^ query
%
method
_queryTimestamp: timestampString
	| timeStamp query |
	timeStamp := DateAndTime fromString: timestampString.
	query := self _TestSuiteSample_class querySuiteSamples: 'each.timeStamp = x'.
	query
		bind: 'x'
		to: timeStamp.
	^ query
%
method
_currentDir
	^ '$SUPERDOIT_CURRENT_DIR' asFileReference
%
method
_testStatsError: message
	self usage.
	self stderr nextPutAll: '------------------------------'; lf.
	self stderr nextPutAll: message; lf.
	self stderr nextPutAll: '------------------------------'; lf.
	^ self exitWithStatus: 1 
%
method
_TestCaseSample_class
	"Rowan is expected to be present ... in the 3.5.0 stone we're using 
		RwsTestCaseSample. In later versons 3.7 or 3.6 we'll use 
		GsTestCaseSample"

	^ (System gemVersionAt: 'gsRelease') = '3.5.0'
		ifTrue: [ Rowan globalNamed: 'RwsTestCaseSample' ]
		ifFalse: [ Rowan globalNamed: 'GsTestCaseSample' ]
%
method
_TestSuiteSample_class
	"Rowan is expected to be present ... in the 3.5.0 stone we're using 
		RwsTestSuiteSample. In later versons 3.7 or 3.6 we'll use 
		GsTestSuiteSample"

	^ (System gemVersionAt: 'gsRelease') = '3.5.0'
		ifTrue: [ Rowan globalNamed: 'RwsTestSuiteSample' ]
		ifFalse: [ Rowan globalNamed: 'GsTestSuiteSample' ]
%
method
doBranches
	| branches query |
	self gsVer ifNil: [ self error: 'Required option ''--gsVer'' not specified' ].
	query := self _TestSuiteSample_class querySuiteSamples: 'each.gsVersion = x'.
	query
		bind: 'x'
		to: self gsVer.
	branches := Set new.
	query do: [:sample | sample branch isEmpty ifFalse: [ branches add: sample branch ] ].
	branches asArray sort do: [:each | self stdout nextPutAll: each; lf ].
	^ self noResult
%
method
doCompare
	| sample jsonFile |
	jsonFile := self jsonFile asFileReference.
	jsonFile isRelative
		ifTrue: [ jsonFile := self _currentDir / jsonFile pathString ].
	jsonFile exists ifFalse: [ self error: 'The file ', jsonFile pathString printString, ' does not exist.' ].

	sample := self _TestSuiteSample_class fromJson: jsonFile.
	self _TestSuiteSample_class
		compareLatestTestCasesFor: self gsVer
		branch: self branch
		to: sample 
		on: self stdout.
	^ self noResult
%
method
doExport
	| sampleJsonDir count |
	self positionalArgs size = 2
		ifFalse: [ ^ self _testStatsError: 'Missing positional argument: <directory-path>' ].
	sampleJsonDir := (self positionalArgs at: 2) asFileReference.
	sampleJsonDir isRelative
		ifTrue: [ sampleJsonDir := self _currentDir / sampleJsonDir pathString ].
	count := 0.
	self _TestSuiteSample_class suiteSamples do: [:sample |
		(sampleJsonDir / count asString, 'ston') writeStreamDo: [:stream |
			self _exportSample: sample to: stream ].
		count := count + 1 ].
	self stdout nextPutAll: count printString, ' samples'; lf.
	^ self noResult
%
method
doImport
	| sampleJsonDir count |
	self positionalArgs size = 2
		ifFalse: [ ^ self _testStatsError: 'Missing positional argument: <directory-path>' ].
	sampleJsonDir := (self positionalArgs at: 2) asFileReference.
	sampleJsonDir isRelative
		ifTrue: [ sampleJsonDir := self _currentDir / sampleJsonDir pathString ].
	count := 0.
	self _TestSuiteSample_class resetSuiteSamples.
	sampleJsonDir files do: [:file |
		file readStreamDo: [:fileStream |
			| stream suiteSample |
			stream := ZnBufferedReadStream on: fileStream. "wrap with buffered stream to bypass https://github.com/GemTalk/FileSystemGs/issues/9"
			stream sizeBuffer: file size.
			suiteSample := self _TestSuiteSample_class fromJsonStream: stream.
			self _TestSuiteSample_class saveSample: suiteSample.
			count := count + 1 ].
		System commit].
	self stdout nextPutAll: count printString, ' samples...'.
	self _TestSuiteSample_class suiteSamples do: [:suiteSample |
			"convert test samples back into RcLowMaintenanceIdentityBags"
			| ar |
			ar := suiteSample testCases.
			suiteSample _testCases: ar. "this method recreates the testCases collection"
			System commit.
			].
	self stdout nextPutAll: 'IMPORTED'; lf.
	^ self noResult
%
method
doLookup
	| sample jsonFile |
	sample := self timeStamp
		ifNotNil: [:ts | 
			(self _queryTimestamp: ts) reversedReadStream next ]
		ifNil: [ 
			self _TestSuiteSample_class
				latestQuerySuiteSampleFor: self branch 
				andVersion: self gsVer ].
	sample 
		ifNil: [ 
		^ self error: 'No sample found matching gsVer ', 
				self gsVer printString, 
				' and branch ', 
				self branch printString, ' or timestamp ', self timeStamp printString ].
	self jsonFile ifNil: [ self error: 'Required option ''--jsonFile'' not specified' ].
	jsonFile := self jsonFile asFileReference.
	jsonFile isRelative
		ifTrue: [ jsonFile := self _currentDir / jsonFile pathString ].
	jsonFile writeStreamDo: [:stream |
			self _exportSample: sample to: stream ].
	^ self noResult
%
method
doRemove
	| query count limit |
	self positionalArgs size = 3
		ifFalse: [ ^ self _testStatsError: 'Missing positional arguments: <count> and <time-stamp>' ].
	query := self _queryTimestamp: (self positionalArgs at: 2).
	limit := (self positionalArgs at: 3) asInteger.
	count := 0.
	query do: [:each | 
		count < limit 
			ifTrue: [
				count := count + 1.
				self _TestSuiteSample_class suiteSamples remove: each ] ].
	self _commit.
	self stdout nextPutAll: 'Removed ', count printString, ' samples'; lf.
	^ self noResult
%
method
doSetSHA
	| query result |
	self positionalArgs size = 3
		ifFalse: [ ^ self _testStatsError: 'Missing positional arguments: <time-stamp> and <sha>' ].
	query := self _queryTimestamp: (self positionalArgs at: 2).
	result := query queryResult.
	result size = 0
		ifTrue: [ ^ self _testStatsError: 'No samples found with the given time stamp' ].
	result size > 1
		ifTrue: [ ^ self _testStatsError: result size printString, ' samples found with the given time stamp' ].
	result do: [:each | each commitSha: (self positionalArgs at: 3) ].
	self _commit.
	^ self noResult
%
method
doStore
	| sample jsonFile |
	jsonFile := self jsonFile asFileReference.
	jsonFile isRelative
		ifTrue: [ jsonFile := self _currentDir / jsonFile pathString ].
	jsonFile exists ifFalse: [ self error: 'The file ', jsonFile pathString printString, ' does not exist.' ].
	sample := self _TestSuiteSample_class fromJson: jsonFile.
	self branch
		ifNil: [ ^ self  _testStatsError: 'Missing required option --branch' ].
	sample branch: self branch.
	self _TestSuiteSample_class suiteSamples add: sample.
	self _commit.
	self stdout nextPutAll: sample timeStamp printString; lf.
	^ self noResult
%
method
doSummary
	| query |
	self positionalArgs size = 2
		ifFalse: [ ^ self _testStatsError: 'Missing positional argument: <time-stamp>' ].
	query := self _queryTimestamp: (self positionalArgs at: 2).
	query do: [:sample | 
		self stdout 
			nextPutAll: '['.
		sample timeStamp printLocalOn: self stdout.
		self stdout
			nextPutAll: ']'; lf;
			tab; nextPutAll: 'gemstone ', sample gsVersion; nextPutAll: ' branch: ', sample branch; lf;
			tab; nextPutAll: sample suiteName; lf;
			tab; nextPutAll: ((sample resultsSummary) at: 'summary'); lf ].
	^ self noResult
%
method
doTestResults
	| query |
	self positionalArgs size = 2
		ifFalse: [ ^ self _testStatsError: 'Missing positional argument: <time-stamp>' ].
	query := self _queryTimestamp: (self positionalArgs at: 2).
	query do: [:sample | 
		self stdout 
			nextPutAll: '['.
		sample timeStamp printLocalOn: self stdout.
		self stdout
			nextPutAll: ']'; lf.
		sample suiteSummaryOn: self stdout ].
	^ self noResult
%
method
doTimestamp
	| sample |
	sample := self timeStamp
		ifNotNil: [:ts | 
			(self _queryTimestamp: ts) reversedReadStream next ]
		ifNil: [ 
			self _TestSuiteSample_class
				latestQuerySuiteSampleFor: self branch 
				andVersion: self gsVer ].
	sample 
		ifNil: [ 
		^ self error: 'No sample found matching gsVer ', 
				self gsVer printString, 
				' and branch ', 
				self branch printString ].
	self stdout nextPutAll: sample timeStamp printString; lf.
	^ self noResult
%
method
doVersions
	(self _TestSuiteSample_class suiteSamples collect: [:each | each gsVersion ]) asSet asArray sort 
		do: [:each | self stdout nextPutAll: each; lf ].
	^ self noResult
%
doit
	| command |
	command := (self positionalArgs atOrNil: 1)
		ifNotNil: [:arg | command := arg asLowercase ]
		ifNil: [ ^ self _testStatsError: 'No command specified' ].
	command = 'branches' ifTrue: [ ^ self doBranches ].
	command = 'compare' ifTrue: [ ^ self doCompare ].
	command = 'export' ifTrue: [ ^ self doExport ].
	command = 'import' ifTrue: [ ^ self doImport ].
	command = 'lookup' ifTrue: [ ^ self doLookup ].
	command = 'remove' ifTrue: [ ^ self doRemove ].
	command = 'results' ifTrue: [ ^ self doTestResults ].
	command = 'setsha' ifTrue: [ ^ self doSetSHA ].
	command = 'store' ifTrue: [ ^ self doStore ].
	command = 'summary' ifTrue: [ ^ self doSummary ].
	command = 'timestamp' ifTrue: [ ^ self doTimestamp ].
	command = 'versions' ifTrue: [ ^ self doVersions ].
	command = 'xxx' 
		ifTrue: [ 
			"undocumented -- used for testing and development"
			^ self _doXXX ].
	^ self _testStatsError: 'Unknown command ', command printString, ' specified'
%
