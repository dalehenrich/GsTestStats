#!/usr/bin/env superdoit_home
options
{
  SuperDoitRequiredCommandLineOption long: 'branch'.
  SuperDoitRequiredCommandLineOption long: 'version'.
  SuperDoitCommandLineOption long: 'help' short: 'h'.
  SuperDoitCommandLineOption long: 'debug' short: 'D'.
}
%
usage
-----
USAGE $basename <stone-name> [--help | -h] [--debug | -D] \
            --branch=<branch-name> --version=<gemstone-version> <test-results-json-file>

DESCRIPTION
  Compare the given testsResults.json file against the test suite sample in the
    stone for the given <branch-NAME> and <gemstone-version>.

OPTIONS
  <stone-name>               name of the stone in which this script will be 
                               executed
  <test-results-json-file>   name of the .json file that contains the test
                               results
      --branch=<branch-name> name of the branch to be used in the query against
                               existing test suite sample in the stone
      --version=<gemstone-version>
                             gemstone version to be used in the query against
                               existing test suite sample in the stone
  -h, --help                 display usage message
  -D, --debug                bring up a topaz debugger in the event of an error

EXAMPLES
  $basename gs_370 --help
  $basename gs_370 -h
  $basename gs_370 --debug --branch=masterV2.1 testResults.json
  $basename gs_370 -D --branch=masterV2.1 testResults.json
  $basename gs_370 --branch=masterV2.1 testResults.json
-----
%
method
jsonFile
	^ (self positionalArgs at: 1) asFileReference
%
method
_suiteSamplesFrom: aFileReference
	^ (GsTestSuiteSample fromJson: aFileReference)
		branch: self branch;
		yourself
%
method
getAndVerifyOptions
		self getOpts: self optionSpecs.
		self help ifTrue: [ ^ self usage ].
		self branch 
			ifNil: [ self error: 'Required ''--branch'' option not set' ].
		self version 
			ifNil: [ self error: 'Required ''--version'' option not set' ].
		self positionalArgs size < 1 
			ifTrue: [self error: 'Missing positional argument <test-results-json-file>'].
%
doit
	[
		| suiteSample |
    self getAndVerifyOptions == self noResult
			ifTrue: [ ^ self noResult ].
		suiteSample := self _suiteSamplesFrom: self jsonFile.
		GsTestSuiteSample 
			compareLatestTestCasesFor: self version
				branch: self branch
				to: suiteSample
				on: self stdout.
		^ true
	] on: Error do: [:ex | 
		self debug ifTrue: [ ex pass ].
		self exit: ex description withStatus: 1 "does not return" ].
%
