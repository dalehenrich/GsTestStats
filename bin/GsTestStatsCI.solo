#!/usr/bin/env superdoit_solo
options
{
	SuperDoitOptionalOptionWithNoArg long: 'fail'.
	SuperDoitOptionalOptionWithNoArg long: 'pass'.
	SuperDoitOptionalOptionWithNoArg long: 'notPassing'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]

DESCRIPTION
  Run the CI tests for GsTestStats

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename --debug
  $basename -D                     # run tests for default class list (GsTestStatsTest)
  $basename -D SCIExcludedTests    # run tests for classes listed on command line
  $basename -D --fail              # run tests that pass and fail
  $basename -D --pass              # run tests that pass
  $basename -D --pass --notPassing # run tests that pass, report detail on only failing tests
  $basename -D --fail --notPassing # run tests that pass and fail, report detail on only failing tests
-----
%
specUrls
file:$GITHUB_WORKSPACE/rowan/specs/GsTestStats.ston
%
doit
	| runnerClass runner reporter result classes |
	self preDoitSpecLoad: [:loadSpec |
		loadSpec 
			customConditionalAttributes: (loadSpec customConditionalAttributes, #('tests'));
			projectsHome: '$GITHUB_WORKSPACE/..'.
		].
	GsTestStatsCI isColorful: true. "force isColorful"
	classes := self fail
		ifTrue: [ { Rowan globalNamed: 'SCIExcludedTests'. Rowan globalNamed: 'SCIPassingTests' } ]
		ifFalse: [ 
			self pass
				ifTrue: [ {Rowan globalNamed: 'SCIPassingTests'} ]
				ifFalse: [ 
					| classNames |
					classNames := self positionalArgs isEmpty
						ifTrue: [ {'GsTestStatsTest'} ]
						ifFalse: [ self positionalArgs ].
					(classNames collect: [:each | Rowan globalNamed: each ]) reject: [:each | each isNil ] ] ].
	runnerClass := Rowan globalNamed: 'GsTestStatsCITestRunner'.
	runner := self debug
		ifTrue: [
			runnerClass 
				debugClasses: classes
				named: 'Stdout-testReportSuccess' ]
		ifFalse: [
			runnerClass 
				runClasses: classes
				named: 'Stdout-testReportSuccess' ].
	reporter := self notPassing
		ifTrue: [  (Rowan globalNamed: 'GsTestStatsCITestReporterStdout') reportNotPassing: runner ]
		ifFalse: [ (Rowan globalNamed: 'GsTestStatsCITestReporterStdout') report: runner ].
	runner isSuccessful
		ifFalse: [ self exitWithStatus: 1 ].
	^ self noResult
%
